From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: root <root@DESKTOP-CQ3R844.localdomain>
Date: Wed, 23 Feb 2022 20:42:34 +0300
Subject: [PATCH] Add NBTChangeEvent


diff --git a/src/main/java/net/parkermc/legends/legendary/event/item/ItemNBTChangeEvent.java b/src/main/java/net/parkermc/legends/legendary/event/item/ItemNBTChangeEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4fb95a789f21add50a310a6b894d28d28dc7cfa
--- /dev/null
+++ b/src/main/java/net/parkermc/legends/legendary/event/item/ItemNBTChangeEvent.java
@@ -0,0 +1,57 @@
+package net.parkermc.legends.legendary.event.item;
+
+import net.parkermc.legends.legendary.nbt.NBTTagCompound;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+/**
+ * Runs whenever an Item's NBT is changed via .setTag
+ */
+public class ItemNBTChangeEvent extends Event {
+    private static final HandlerList handlers = new HandlerList();
+    private NBTTagCompound oldTag;
+    private NBTTagCompound newTag;
+
+    public ItemNBTChangeEvent(@Nullable final NBTTagCompound oldTag, @Nullable final NBTTagCompound newTag){
+        this.oldTag = oldTag;
+        this.newTag = newTag;
+    }
+
+    /**
+     * Calls the event and tests if cancelled.
+     *
+     * @return false if event was cancelled, if cancellable. otherwise true.
+     */
+    @Override
+    public boolean callEvent() { // Not ideal but oh well
+        try{
+            if(!org.bukkit.Bukkit.getServer().isPrimaryThread()){
+                return false;
+            }
+        }catch (NullPointerException | UnsupportedOperationException e){
+            return false;
+        }
+        return super.callEvent();
+    }
+    @Nullable
+    public NBTTagCompound getOldTag() { return oldTag; }
+
+    @Nullable
+    public NBTTagCompound getNewTag() { return newTag; }
+
+    public void setNewTag(@Nullable NBTTagCompound newTag) {
+        this.newTag = newTag;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
